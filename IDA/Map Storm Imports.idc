#include <idc.idc>

static map(orgName, newName, type) {
    auto address;
    address = LocByName(orgName);
    if(address != BADADDR)
        MakeNameEx(address, newName, SN_NOWARN);
    address = LocByName(newName);
    if(type != "")
        SetType(LocByName(newName), type);
}

static main() {
    //map("Storm_151", "", "");
    map("Storm_251", "SFileAuthenticateArchive", "");
    map("Storm_252", "SFileCloseArchive", "");
    map("Storm_253", "SFileCloseFile", "");
    map("Storm_263", "SFileEnableDirectAccess", "");
    map("Storm_264", "SFileGetFileArchive", "");
    map("Storm_265", "SFileGetFileSize", "");
    map("Storm_266", "SFileOpenArchive", "");
    map("Storm_267", "SFileOpenFile", "");
    map("Storm_268", "SFileOpenFileEx", "");
    map("Storm_269", "SFileReadFile", "");
    map("Storm_270", "SFileSetBasePath", "");
    map("Storm_271", "SFileSetFilePointer", "");
    map("Storm_272", "SFileSetLocale", "");
    map("Storm_275", "SFileGetArchiveName", "");
    map("Storm_279", "SFileLoadFile", "");
    map("Storm_280", "SFileUnloadFile", "");
    map("Storm_281", "SFileLoadFileEx", "");
    map("Storm_288", "SFileFileExists", "");
    map("Storm_289", "SFileFileExistsEx", "");
    map("Storm_293", "SFileOpenFileAsArchive", "");
    map("Storm_294", "SFileGetLocale", "");
    map("Storm_295", "SFileRegisterLoadNotifyProc", "");
    map("Storm_300", "SFileOpenPathAsArchive", "");
    map("Storm_302", "StormGetInstance", "");
    map("Storm_401", "SMemAlloc", "void* __stdcall SMemAlloc(int size, const char* fileName, int fileLine, int defaultValue)");
    map("Storm_403", "SMemFree", "BOOL __stdcall SMemFree(void* handle, const char* fileName, int fileLine, int defaultValue)");
    map("Storm_405", "SMemReAlloc", "void* __stdcall SMemReAlloc(void* handle, const char* fileName, int fileLine, int defaultValue)");
    map("Storm_421", "SRegLoadData", ""); 
    map("Storm_422", "SRegLoadString", "");
    map("Storm_423", "SRegLoadValue", "");
    map("Storm_424", "SRegSaveData", "");
    map("Storm_425", "SRegSaveString", "");
    map("Storm_426", "SRegSaveValue", "");
    map("Storm_460", "SErrInit", "");       
    map("Storm_461", "SErrDisplayError", "");
    map("Storm_462", "SErrGetErrorStr", "");
    map("Storm_463", "SErrGetLastError", "");
    map("Storm_465", "SErrSetLastError", "");
    map("Storm_469", "SErrRegisterHandler", "");
    map("Storm_470", "SErr470", "");
    //map("Storm_471", "", "");
    map("Storm_472", "SCmdGetBool", "");
    map("Storm_474", "SCmdGetString", "");
    map("Storm_476", "SCmdRegisterArgList", "");
    map("Storm_479", "SCmdProcessCommandLine", "");
    map("Storm_482", "SMemFindNextHeap", "");
    map("Storm_496", "SMem496", "");
	  map("Storm_501", "SStrCopy", "int __stdcall SStrCopy(char* destination, char* source, int maxLength)");
    map("Storm_502", "SStrHash1", "");
    map("Storm_503", "SStrNCat", "");
    map("Storm_504", "SStrTokenize", "");
    map("Storm_506", "SStrLen", "int __stdcall SStrLen(char* str)");
    map("Storm_507", "SStrDup", "");
    map("Storm_508", "SStrCmp", "");
    map("Storm_509", "SStrCmpI", "");
    map("Storm_510", "SStrUpper", "");
    map("Storm_541", "SLogClose", "");
    map("Storm_542", "SLogCreate", "");
    map("Storm_543", "SLog543", "");
    map("Storm_544", "SLogDump", "");
    map("Storm_545", "SLogFlush", "");
    map("Storm_548", "SLogWrite", "");
    map("Storm_551", "SCompCompress", "");
    map("Storm_552", "SCompDecompress", "");
    map("Storm_553", "SLogVWrite", "");
    map("Storm_563", "SErrIsDisplayingError", "");
    map("Storm_565", "SErrSetLogTitleString", "");
    map("Storm_567", "SErrCatchUnhandledExceptions", "");
    //map("Storm_568", "", "");
    map("Storm_569", "SStrChr1", "");
    map("Storm_570", "SStrChrR1", "");
    map("Storm_571", "SStrChr2", "");
    map("Storm_572", "SStrChrR2", "");
    map("Storm_574", "SStrToFloat", "");
    map("Storm_575", "SStrToInt", "");
    map("Storm_576", "SStrToUnsigned", "");
    map("Storm_577", "SStrToInt64", "");
    map("Storm_578", "SStrVPrintf", "int __stdcall SStrVPrintf(char *dest, size_t size, const char *format, ...)");
    map("Storm_579", "SStrLower", "");
    map("Storm_581", "SStrPrintf", "");
    map("Storm_584", "SStrStrI1", "");
    map("Storm_585", "SStrStrI2", "");
    map("Storm_586", "SStrStr1", "");
    map("Storm_587", "SStrStr2", "");
    //map("Storm_589", "", "");
    map("Storm_590", "SStrHash2", "int __stdcall SStrHash2(char* str)");
    //map("Storm_595", "", "");
    //map("Storm_596", "", "");
    //map("Storm_597", "", "");
    map("Storm_601", "SBigAdd", "");
    map("Storm_603", "SBigCompare", "");
    map("Storm_606", "SBigDel", "");
    map("Storm_607", "SBigDiv", "");
    map("Storm_609", "SBigFromBinary", "");
    map("Storm_612", "SBigFromUnsigned", "");
    map("Storm_619", "SBigIsPrime", "");
    map("Storm_621", "SBigMod", "");
    map("Storm_622", "SBigMul", "");
    map("Storm_624", "SBigNew", "");
    map("Storm_628", "SBigPowMod", "");
    map("Storm_633", "SBigShl", "");
    map("Storm_636", "SBigSub", "");
    map("Storm_638", "SBigToBinaryBuffer", "");
}
